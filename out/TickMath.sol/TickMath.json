{"abi":[],"bytecode":{"object":"0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212202a04be1c631e7767f76f4f1037ecaff698031bb2def601e2f03960b68ab412e864736f6c63430008140033","sourceMap":"305:8543:47:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x600080fdfea26469706673582212202a04be1c631e7767f76f4f1037ecaff698031bb2def601e2f03960b68ab412e864736f6c63430008140033","sourceMap":"305:8543:47:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MAX_TICK256\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Test/utils/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":uniswap-v3-periphery-0.8/=node_modules/uniswap-v3-periphery-0.8/\"],\"viaIR\":true},\"sources\":{\"contracts/Test/utils/TickMath.sol\":{\"keccak256\":\"0xcac85a6966700a31b21a08c9b4bf87289286b6b1160ffc411377f19a878ef5ae\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://60a23a896a330e1392e1b53e6a7d19228f5ce579306a794f1b768a09567d0f36\",\"dweb:/ipfs/QmPdfnRiQfD92o3DG25ywswrCYqf8jF1vTta6wTwawJxnW\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@eth-optimism/=node_modules/@eth-optimism/","@openzeppelin/=node_modules/@openzeppelin/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","uniswap-v3-periphery-0.8/=node_modules/uniswap-v3-periphery-0.8/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/Test/utils/TickMath.sol":"TickMath"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/Test/utils/TickMath.sol":{"keccak256":"0xcac85a6966700a31b21a08c9b4bf87289286b6b1160ffc411377f19a878ef5ae","urls":["bzz-raw://60a23a896a330e1392e1b53e6a7d19228f5ce579306a794f1b768a09567d0f36","dweb:/ipfs/QmPdfnRiQfD92o3DG25ywswrCYqf8jF1vTta6wTwawJxnW"],"license":"GPL-2.0-or-later"}},"version":1},"id":47}