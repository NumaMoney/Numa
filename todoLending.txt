// ***************************** Faisability and estimation ************************
// feature: faisable/quoi modifier/ combien de temps


// - supply numa 
// - supply rEth 



// - borrow rEth
// - borrow numa


// TODO check values: log cf compound dashboard


// ALL INTERACTIONS: REDEEM, LIQUIDATE
// cf doc: https://docs.compound.finance/v2/ctokens/#:~:text=When%20a%20market%20is%20launched,exchange%20rate%20might%20equal%200.021591.

// liquidate borrow et noter quand Ã§a se produit et les incentives (pour voir ce qu'il faudra changer)

// - custom oracle for numa price
// - vault as a rEth supplier
//      - debt in formula
//      - limit borrowable amount
//      - vault is lender without sending liq in compound 
//      - utilization based in CF we consider total lent = supplied + vault's balance that can be used
// - LST
//      - borrow rEth, but when repay we extract rewards
//      - supply rEth, get less rEth (rewards extracted)?



// - liquidations
//       - specific mechanism of reward
//       - function with provided rEth/numa        
//       - offer flashloan option

// - autres: relire Stiive msg
// Add Synth_scaling_PID here? When CF<110%, start scaling every synth price down every 24hrs to democratize losses.
// use cf to limit synth minting?

// - test/liquidation tests/front end tests


// ***************************** Q ************************
// - supply rEth, get less rEth (rewards extracted)?
// - rEth price for numa borrows, based on numa buy price?, but how it works with rewards extraction
// - are the oracles in Eth?


// NOTES

 0.05 < closeFactorMantissa < 0.9


--> on ne peut pas rembourser plus (by liquidation) que 90% du borrow amount et moins que 5%



// ESTIMATE

// REPONSES Stiive

// compound v2










// // NEW PLAN
// // - supply/borrow numa, rEth compound fork
// // - gestion prices/oracles
// // - supply from vault
// // - limit rEth borrow from CF
// // - liquidations
// // - LST
// // - modifs vault using reth debt


1. deploy numa market, reth market on arbi fork/sepolia
2. understand compound v2 contracts & modifs to be done


- comptroller = await deployComptroller(deployer, overrides);
- const priceOracle = await deployPriceOracle(deployer, overrides);
setpriceoracle
 - interestRateModels = await deployInterestRateModels(interestRateModelArgs, deployer);
  
-  const cTokenLikes = await deployCTokens(
    underlying,
    interestRateModels,
    priceOracle,
    comptroller,
    deployer,
    overrides
  );


3. workflow E2E

** deploy:
    - comptroller
    - oracles   
    - interestmodel (or reuse deployed)
    - ctokens

** deposit numa
    - interests or not (utilization + basis)
    - oracle value from vault (sell price)
    - can be used to borrow rEth

** borrow rEth
    - with vault & rEth deposits
    - interests from utilization (vault & deposits)
    - update vault numa price using debt
    - lst

** deposit rEth
    - interests or not (utilization + basis)
    - which price? from vault? in numa?
    - can be used to borrow numa

** borrow numa
    - with deposited rEth
    - interests from utilization (deposits)
    
etc...

4. implem & use actual compound contracts && test


Q:

- which comptroller to use
- which interest model to use
- can numa deposit be used for numa borrow? (same for rEth)
- should we use cerc20Delegator? cerc20immutable?
- a quoi sert initialExchangeRateMantissa et pourquoi 2 x 10e26
- unanswered q from telegram
TODO:

- check audits&compound hacks




********* estimation

2 weeks full time/1 month part time
--> very optimistic

without tests

3 weeks full time 

6 weeks part time

lot of tests todo on test net to be sure it works well
+
some work on front end